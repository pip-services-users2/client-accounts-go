// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: protos/accounts_v1.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountsClient is the client API for Accounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsClient interface {
	GetAccounts(ctx context.Context, in *AccountPageRequest, opts ...grpc.CallOption) (*AccountPageReply, error)
	GetAccountById(ctx context.Context, in *AccountIdRequest, opts ...grpc.CallOption) (*AccountObjectReply, error)
	GetAccountByLogin(ctx context.Context, in *AccountLoginRequest, opts ...grpc.CallOption) (*AccountObjectReply, error)
	GetAccountByIdOrLogin(ctx context.Context, in *AccountLoginRequest, opts ...grpc.CallOption) (*AccountObjectReply, error)
	CreateAccount(ctx context.Context, in *AccountObjectRequest, opts ...grpc.CallOption) (*AccountObjectReply, error)
	UpdateAccount(ctx context.Context, in *AccountObjectRequest, opts ...grpc.CallOption) (*AccountObjectReply, error)
	DeleteAccountById(ctx context.Context, in *AccountIdRequest, opts ...grpc.CallOption) (*AccountObjectReply, error)
}

type accountsClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsClient(cc grpc.ClientConnInterface) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) GetAccounts(ctx context.Context, in *AccountPageRequest, opts ...grpc.CallOption) (*AccountPageReply, error) {
	out := new(AccountPageReply)
	err := c.cc.Invoke(ctx, "/accounts_v1.Accounts/get_accounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetAccountById(ctx context.Context, in *AccountIdRequest, opts ...grpc.CallOption) (*AccountObjectReply, error) {
	out := new(AccountObjectReply)
	err := c.cc.Invoke(ctx, "/accounts_v1.Accounts/get_account_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetAccountByLogin(ctx context.Context, in *AccountLoginRequest, opts ...grpc.CallOption) (*AccountObjectReply, error) {
	out := new(AccountObjectReply)
	err := c.cc.Invoke(ctx, "/accounts_v1.Accounts/get_account_by_login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetAccountByIdOrLogin(ctx context.Context, in *AccountLoginRequest, opts ...grpc.CallOption) (*AccountObjectReply, error) {
	out := new(AccountObjectReply)
	err := c.cc.Invoke(ctx, "/accounts_v1.Accounts/get_account_by_id_or_login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) CreateAccount(ctx context.Context, in *AccountObjectRequest, opts ...grpc.CallOption) (*AccountObjectReply, error) {
	out := new(AccountObjectReply)
	err := c.cc.Invoke(ctx, "/accounts_v1.Accounts/create_account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateAccount(ctx context.Context, in *AccountObjectRequest, opts ...grpc.CallOption) (*AccountObjectReply, error) {
	out := new(AccountObjectReply)
	err := c.cc.Invoke(ctx, "/accounts_v1.Accounts/update_account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) DeleteAccountById(ctx context.Context, in *AccountIdRequest, opts ...grpc.CallOption) (*AccountObjectReply, error) {
	out := new(AccountObjectReply)
	err := c.cc.Invoke(ctx, "/accounts_v1.Accounts/delete_account_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServer is the server API for Accounts service.
// All implementations must embed UnimplementedAccountsServer
// for forward compatibility
type AccountsServer interface {
	GetAccounts(context.Context, *AccountPageRequest) (*AccountPageReply, error)
	GetAccountById(context.Context, *AccountIdRequest) (*AccountObjectReply, error)
	GetAccountByLogin(context.Context, *AccountLoginRequest) (*AccountObjectReply, error)
	GetAccountByIdOrLogin(context.Context, *AccountLoginRequest) (*AccountObjectReply, error)
	CreateAccount(context.Context, *AccountObjectRequest) (*AccountObjectReply, error)
	UpdateAccount(context.Context, *AccountObjectRequest) (*AccountObjectReply, error)
	DeleteAccountById(context.Context, *AccountIdRequest) (*AccountObjectReply, error)
	mustEmbedUnimplementedAccountsServer()
}

// UnimplementedAccountsServer must be embedded to have forward compatible implementations.
type UnimplementedAccountsServer struct {
}

func (UnimplementedAccountsServer) GetAccounts(context.Context, *AccountPageRequest) (*AccountPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedAccountsServer) GetAccountById(context.Context, *AccountIdRequest) (*AccountObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountById not implemented")
}
func (UnimplementedAccountsServer) GetAccountByLogin(context.Context, *AccountLoginRequest) (*AccountObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByLogin not implemented")
}
func (UnimplementedAccountsServer) GetAccountByIdOrLogin(context.Context, *AccountLoginRequest) (*AccountObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByIdOrLogin not implemented")
}
func (UnimplementedAccountsServer) CreateAccount(context.Context, *AccountObjectRequest) (*AccountObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountsServer) UpdateAccount(context.Context, *AccountObjectRequest) (*AccountObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountsServer) DeleteAccountById(context.Context, *AccountIdRequest) (*AccountObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountById not implemented")
}
func (UnimplementedAccountsServer) mustEmbedUnimplementedAccountsServer() {}

// UnsafeAccountsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsServer will
// result in compilation errors.
type UnsafeAccountsServer interface {
	mustEmbedUnimplementedAccountsServer()
}

func RegisterAccountsServer(s grpc.ServiceRegistrar, srv AccountsServer) {
	s.RegisterService(&Accounts_ServiceDesc, srv)
}

func _Accounts_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts_v1.Accounts/get_accounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetAccounts(ctx, req.(*AccountPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts_v1.Accounts/get_account_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetAccountById(ctx, req.(*AccountIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetAccountByLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetAccountByLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts_v1.Accounts/get_account_by_login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetAccountByLogin(ctx, req.(*AccountLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetAccountByIdOrLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetAccountByIdOrLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts_v1.Accounts/get_account_by_id_or_login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetAccountByIdOrLogin(ctx, req.(*AccountLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts_v1.Accounts/create_account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).CreateAccount(ctx, req.(*AccountObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts_v1.Accounts/update_account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateAccount(ctx, req.(*AccountObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_DeleteAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).DeleteAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts_v1.Accounts/delete_account_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).DeleteAccountById(ctx, req.(*AccountIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Accounts_ServiceDesc is the grpc.ServiceDesc for Accounts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Accounts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounts_v1.Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_accounts",
			Handler:    _Accounts_GetAccounts_Handler,
		},
		{
			MethodName: "get_account_by_id",
			Handler:    _Accounts_GetAccountById_Handler,
		},
		{
			MethodName: "get_account_by_login",
			Handler:    _Accounts_GetAccountByLogin_Handler,
		},
		{
			MethodName: "get_account_by_id_or_login",
			Handler:    _Accounts_GetAccountByIdOrLogin_Handler,
		},
		{
			MethodName: "create_account",
			Handler:    _Accounts_CreateAccount_Handler,
		},
		{
			MethodName: "update_account",
			Handler:    _Accounts_UpdateAccount_Handler,
		},
		{
			MethodName: "delete_account_by_id",
			Handler:    _Accounts_DeleteAccountById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/accounts_v1.proto",
}
